from collections import deque

# --- 1. –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ê–ª–≥–æ—Ä–∏—Ç–º—É –ï–¥–º–æ–Ω–¥—Å–∞-–ö–∞—Ä–ø–∞ ---
# –§—É–Ω–∫—Ü—ñ—ó bfs —Ç–∞ edmonds_karp –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –∫–æ—Ä–µ–∫—Ç–Ω—ñ.
def bfs(capacity_matrix, flow_matrix, source, sink, parent):
    """–®—É–∫–∞—î —à–ª—è—Ö –≤—ñ–¥ source –¥–æ sink —É –∑–∞–ª–∏—à–∫–æ–≤–æ–º—É –≥—Ä–∞—Ñ—ñ."""
    num_nodes = len(capacity_matrix)
    visited = [False] * num_nodes
    queue = deque([source])
    visited[source] = True
    while queue:
        u = queue.popleft()
        for v in range(num_nodes):
            if not visited[v] and capacity_matrix[u][v] - flow_matrix[u][v] > 0:
                parent[v] = u
                visited[v] = True
                if v == sink:
                    return True
                queue.append(v)
    return False

def edmonds_karp(capacity_matrix, source, sink):
    """–û–±—á–∏—Å–ª—é—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫ –∑ source –¥–æ sink."""
    num_nodes = len(capacity_matrix)
    flow_matrix = [[0] * num_nodes for _ in range(num_nodes)] 
    parent = [-1] * num_nodes
    max_flow = 0
    while bfs(capacity_matrix, flow_matrix, source, sink, parent):
        path_flow = float('Inf')
        s = sink
        while s != source:
            u = parent[s]
            path_flow = min(path_flow, capacity_matrix[u][s] - flow_matrix[u][s])
            s = u
        v = sink
        while v != source:
            u = parent[v]
            flow_matrix[u][v] += path_flow
            flow_matrix[v][u] -= path_flow  
            v = u
        max_flow += path_flow
    return max_flow, flow_matrix

# --- 2. –ü–æ–±—É–¥–æ–≤–∞ –ì—Ä–∞—Ñ–∞ —Ç–∞ –ú–∞—Ç—Ä–∏—Ü—ñ –ü—Ä–æ–ø—É—Å–∫–Ω–æ—ó –ó–¥–∞—Ç–Ω–æ—Å—Ç—ñ ---
# –¶–µ–π —Ä–æ–∑–¥—ñ–ª —Ç–æ—á–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –Ω–∞–¥–∞–Ω–∏–π –º–∞–ª—é–Ω–æ–∫ —Ç–∞ —Ç–∞–±–ª–∏—Ü—é –ø—Ä–æ–ø—É—Å–∫–Ω–∏—Ö –∑–¥–∞—Ç–Ω–æ—Å—Ç–µ–π.
nodes = {
    'S': 0, 'T': 20, 
    '–¢–µ—Ä–º—ñ–Ω–∞–ª 1': 1, '–¢–µ—Ä–º—ñ–Ω–∞–ª 2': 2,
    '–°–∫–ª–∞–¥ 1': 3, '–°–∫–ª–∞–¥ 2': 4, '–°–∫–ª–∞–¥ 3': 5, '–°–∫–ª–∞–¥ 4': 6,
    '–ú–∞–≥–∞–∑–∏–Ω 1': 7, '–ú–∞–≥–∞–∑–∏–Ω 2': 8, '–ú–∞–≥–∞–∑–∏–Ω 3': 9, '–ú–∞–≥–∞–∑–∏–Ω 4': 10, '–ú–∞–≥–∞–∑–∏–Ω 5': 11,
    '–ú–∞–≥–∞–∑–∏–Ω 6': 12, '–ú–∞–≥–∞–∑–∏–Ω 7': 13, '–ú–∞–≥–∞–∑–∏–Ω 8': 14, '–ú–∞–≥–∞–∑–∏–Ω 9': 15, '–ú–∞–≥–∞–∑–∏–Ω 10': 16,
    '–ú–∞–≥–∞–∑–∏–Ω 11': 17, '–ú–∞–≥–∞–∑–∏–Ω 12': 18, '–ú–∞–≥–∞–∑–∏–Ω 13': 19, '–ú–∞–≥–∞–∑–∏–Ω 14': 20
}
num_nodes = 21 
INF = 1000 
capacity_matrix = [[0] * num_nodes for _ in range(num_nodes)]

edges = [
    ('S', '–¢–µ—Ä–º—ñ–Ω–∞–ª 1', INF), ('S', '–¢–µ—Ä–º—ñ–Ω–∞–ª 2', INF),
    
    # –¢–µ—Ä–º—ñ–Ω–∞–ª–∏ -> –°–∫–ª–∞–¥–∏ (–ó–≥—ñ–¥–Ω–æ –∑ —Ç–∞–±–ª–∏—Ü–µ—é —Ç–∞ –º–∞–ª—é–Ω–∫–æ–º)
    ('–¢–µ—Ä–º—ñ–Ω–∞–ª 1', '–°–∫–ª–∞–¥ 1', 25),
    ('–¢–µ—Ä–º—ñ–Ω–∞–ª 1', '–°–∫–ª–∞–¥ 2', 20),
    ('–¢–µ—Ä–º—ñ–Ω–∞–ª 1', '–°–∫–ª–∞–¥ 3', 15),
    ('–¢–µ—Ä–º—ñ–Ω–∞–ª 2', '–°–∫–ª–∞–¥ 3', 15),
    ('–¢–µ—Ä–º—ñ–Ω–∞–ª 2', '–°–∫–ª–∞–¥ 4', 30),
    ('–¢–µ—Ä–º—ñ–Ω–∞–ª 2', '–°–∫–ª–∞–¥ 2', 10),

    # –°–∫–ª–∞–¥–∏ -> –ú–∞–≥–∞–∑–∏–Ω–∏
    ('–°–∫–ª–∞–¥ 1', '–ú–∞–≥–∞–∑–∏–Ω 1', 15), ('–°–∫–ª–∞–¥ 1', '–ú–∞–≥–∞–∑–∏–Ω 2', 10), ('–°–∫–ª–∞–¥ 1', '–ú–∞–≥–∞–∑–∏–Ω 3', 20),
    ('–°–∫–ª–∞–¥ 2', '–ú–∞–≥–∞–∑–∏–Ω 4', 15), ('–°–∫–ª–∞–¥ 2', '–ú–∞–≥–∞–∑–∏–Ω 5', 10), ('–°–∫–ª–∞–¥ 2', '–ú–∞–≥–∞–∑–∏–Ω 6', 25),
    ('–°–∫–ª–∞–¥ 3', '–ú–∞–≥–∞–∑–∏–Ω 7', 20), ('–°–∫–ª–∞–¥ 3', '–ú–∞–≥–∞–∑–∏–Ω 8', 15), ('–°–∫–ª–∞–¥ 3', '–ú–∞–≥–∞–∑–∏–Ω 9', 10),
    ('–°–∫–ª–∞–¥ 4', '–ú–∞–≥–∞–∑–∏–Ω 10', 20), ('–°–∫–ª–∞–¥ 4', '–ú–∞–≥–∞–∑–∏–Ω 11', 10), ('–°–∫–ª–∞–¥ 4', '–ú–∞–≥–∞–∑–∏–Ω 12', 15),
    ('–°–∫–ª–∞–¥ 4', '–ú–∞–≥–∞–∑–∏–Ω 13', 5), ('–°–∫–ª–∞–¥ 4', '–ú–∞–≥–∞–∑–∏–Ω 14', 10)
]

for u_name, v_name, cap in edges:
    u = nodes[u_name]
    v = nodes[v_name]
    capacity_matrix[u][v] = cap

shops = [f'–ú–∞–≥–∞–∑–∏–Ω {i}' for i in range(1, 15)]
T_index = nodes['T']
for shop_name in shops:
    capacity_matrix[nodes[shop_name]][T_index] = INF 


# --- 3. –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ê–ª–≥–æ—Ä–∏—Ç–º—É —Ç–∞ –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –ü–æ—Ç–æ–∫—É ---

source_node = nodes['S']
sink_node = nodes['T']
max_flow, flow_matrix = edmonds_karp(capacity_matrix, source_node, sink_node)

reverse_nodes = {v: k for k, v in nodes.items()}
terminals = ['–¢–µ—Ä–º—ñ–Ω–∞–ª 1', '–¢–µ—Ä–º—ñ–Ω–∞–ª 2']
warehouses = ['–°–∫–ª–∞–¥ 1', '–°–∫–ª–∞–¥ 2', '–°–∫–ª–∞–¥ 3', '–°–∫–ª–∞–¥ 4']

# 3.1. –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è: –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É –¢–µ—Ä–º—ñ–Ω–∞–ª -> –ú–∞–≥–∞–∑–∏–Ω
# –û–±—á–∏—Å–ª—é—î–º–æ –≤–Ω–µ—Å–æ–∫ –¢–µ—Ä–º—ñ–Ω–∞–ª–∞ —É –ø–æ—Ç—ñ–∫ –∫–æ–∂–Ω–æ–≥–æ –°–∫–ª–∞–¥—É, 
# –∞ –ø–æ—Ç—ñ–º —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø–æ—Ç—ñ–∫ –°–∫–ª–∞–¥ -> –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ —Ü—å–æ–º—É –≤–Ω–µ—Å–∫—É.

# –ö—Ä–æ–∫ 1: –û–±—á–∏—Å–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫ —É –∫–æ–∂–µ–Ω –°–∫–ª–∞–¥
warehouse_inflow = {w: 0 for w in warehouses}
for w in warehouses:
    w_idx = nodes[w]
    for t in terminals:
        t_idx = nodes[t]
        warehouse_inflow[w] += flow_matrix[t_idx][w_idx]

# –ö—Ä–æ–∫ 2: –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å—Ç–∫—É –ø–æ—Ç–æ–∫—É –≤—ñ–¥ –∫–æ–∂–Ω–æ–≥–æ –¢–µ—Ä–º—ñ–Ω–∞–ª–∞ –¥–æ –∫–æ–∂–Ω–æ–≥–æ –°–∫–ª–∞–¥—É
term_to_warehouse_share = {t: {} for t in terminals}
for t in terminals:
    t_idx = nodes[t]
    for w in warehouses:
        w_idx = nodes[w]
        inflow = flow_matrix[t_idx][w_idx]
        total_inflow = warehouse_inflow[w]
        # –ß–∞—Å—Ç–∫–∞ –¢–µ—Ä–º—ñ–Ω–∞–ª–∞ —É –∑–∞–≥–∞–ª—å–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ –°–∫–ª–∞–¥—É
        share = inflow / total_inflow if total_inflow > 0 else 0
        term_to_warehouse_share[t][w] = share

# –ö—Ä–æ–∫ 3: –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ –ø–æ—Ç—ñ–∫ –°–∫–ª–∞–¥ -> –ú–∞–≥–∞–∑–∏–Ω –∑–≥—ñ–¥–Ω–æ –∑ —á–∞—Å—Ç–∫–∞–º–∏ –¢–µ—Ä–º—ñ–Ω–∞–ª—ñ–≤
term_to_shop_flow = {t: {s: 0 for s in shops} for t in terminals}
for w in warehouses:
    w_idx = nodes[w]
    for s in shops:
        s_idx = nodes[s]
        # –ü–æ—Ç—ñ–∫, —â–æ –Ω–∞–¥—Ö–æ–¥–∏—Ç—å —ñ–∑ —Ü—å–æ–≥–æ –°–∫–ª–∞–¥—É –≤ —Ü–µ–π –ú–∞–≥–∞–∑–∏–Ω
        warehouse_to_shop_flow = flow_matrix[w_idx][s_idx]
        
        # –†–æ–∑–ø–æ–¥—ñ–ª—è—î–º–æ —Ü–µ–π –ø–æ—Ç—ñ–∫ –º—ñ–∂ –¢–µ—Ä–º—ñ–Ω–∞–ª–∞–º–∏
        for t in terminals:
            share = term_to_warehouse_share[t].get(w, 0)
            term_to_shop_flow[t][s] += warehouse_to_shop_flow * share

# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –¢–µ—Ä–º—ñ–Ω–∞–ª -> –ú–∞–≥–∞–∑–∏–Ω
final_report_table = []
for t in terminals:
    for s in shops:
        flow = round(term_to_shop_flow[t][s]) # –û–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ —Ü—ñ–ª–∏—Ö –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        final_report_table.append({'–¢–µ—Ä–º—ñ–Ω–∞–ª': t, '–ú–∞–≥–∞–∑–∏–Ω': s, '–§–∞–∫—Ç–∏—á–Ω–∏–π –ü–æ—Ç—ñ–∫': flow})

# –ó–±—ñ—Ä –ø–æ—Ç–æ–∫—ñ–≤ —É –ú–∞–≥–∞–∑–∏–Ω–∏ (–¥–ª—è –ê–Ω–∞–ª—ñ–∑—É 3)
shop_flows = []
for s in shops:
    actual_flow_to_shop = flow_matrix[nodes[s]][T_index]
    shop_flows.append({
        '–ú–∞–≥–∞–∑–∏–Ω': s,
        '–ü–æ—Ç—ñ–∫ –¥–æ –ú–∞–≥–∞–∑–∏–Ω—É': actual_flow_to_shop
    })
# --- 4. –í–∏–≤—ñ–¥ —Ç–∞ –ê–Ω–∞–ª—ñ–∑ ---

print(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫ —É –º–µ—Ä–µ–∂—ñ: {max_flow} –æ–¥–∏–Ω–∏—Ü—å")
print("-" * 50)
print("üìä –ó–≤—ñ—Ç: –ê–Ω–∞–ª—ñ–∑ –õ–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó –ú–µ—Ä–µ–∂—ñ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ü–æ—Ç–æ–∫—É")
print("-" * 50)

# –¢–∞–±–ª–∏—Ü—è: –§–∞–∫—Ç–∏—á–Ω–∏–π –ü–æ—Ç—ñ–∫ –¢–µ—Ä–º—ñ–Ω–∞–ª -> –ú–∞–≥–∞–∑–∏–Ω
print("\n## –¢–∞–±–ª–∏—Ü—è: –§–∞–∫—Ç–∏—á–Ω–∏–π –ü–æ—Ç—ñ–∫ –¢–µ—Ä–º—ñ–Ω–∞–ª -> –ú–∞–≥–∞–∑–∏–Ω")
print("| –¢–µ—Ä–º—ñ–Ω–∞–ª | –ú–∞–≥–∞–∑–∏–Ω | –§–∞–∫—Ç–∏—á–Ω–∏–π –ü–æ—Ç—ñ–∫ (–æ–¥–∏–Ω–∏—Ü—å) |")
print("| :---: | :---: | :---: |")
for item in final_report_table:
    print(f"| {item['–¢–µ—Ä–º—ñ–Ω–∞–ª']} | {item['–ú–∞–≥–∞–∑–∏–Ω']} | {item['–§–∞–∫—Ç–∏—á–Ω–∏–π –ü–æ—Ç—ñ–∫']} |")

print("\n## –ê–Ω–∞–ª—ñ–∑ –û—Ç—Ä–∏–º–∞–Ω–∏—Ö –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—É–º–∞—Ä–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É —á–µ—Ä–µ–∑ –¢–µ—Ä–º—ñ–Ω–∞–ª–∏ (–¥–ª—è –ê–Ω–∞–ª—ñ–∑—É 1)
flow_term1 = sum(item['–§–∞–∫—Ç–∏—á–Ω–∏–π –ü–æ—Ç—ñ–∫'] for item in final_report_table if item['–¢–µ—Ä–º—ñ–Ω–∞–ª'] == '–¢–µ—Ä–º—ñ–Ω–∞–ª 1')
flow_term2 = sum(item['–§–∞–∫—Ç–∏—á–Ω–∏–π –ü–æ—Ç—ñ–∫'] for item in final_report_table if item['–¢–µ—Ä–º—ñ–Ω–∞–ª'] == '–¢–µ—Ä–º—ñ–Ω–∞–ª 2')

### 1. –Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∞–ª–∏ –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –Ω–∞–π–±—ñ–ª—å—à–∏–π –ø–æ—Ç—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–æ –º–∞–≥–∞–∑–∏–Ω—ñ–≤?
print("### 1. –Ø–∫—ñ —Ç–µ—Ä–º—ñ–Ω–∞–ª–∏ –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –Ω–∞–π–±—ñ–ª—å—à–∏–π –ø–æ—Ç—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–æ –º–∞–≥–∞–∑–∏–Ω—ñ–≤?")
print(f"**–¢–µ—Ä–º—ñ–Ω–∞–ª 1** –ø–æ—Å—Ç–∞—á–∞—î **{flow_term1}** –æ–¥–∏–Ω–∏—Ü—å.")
print(f"**–¢–µ—Ä–º—ñ–Ω–∞–ª 2** –ø–æ—Å—Ç–∞—á–∞—î **{flow_term2}** –æ–¥–∏–Ω–∏—Ü—å.")

if flow_term1 > flow_term2:
    print(f"**–¢–µ—Ä–º—ñ–Ω–∞–ª 1** ({flow_term1}) –∑–∞–±–µ–∑–ø–µ—á—É—î –±—ñ–ª—å—à–∏–π –ø–æ—Ç—ñ–∫, –Ω—ñ–∂ –¢–µ—Ä–º—ñ–Ω–∞–ª 2 ({flow_term2}).")
elif flow_term2 > flow_term1:
    print(f"**–¢–µ—Ä–º—ñ–Ω–∞–ª 2** ({flow_term2}) –∑–∞–±–µ–∑–ø–µ—á—É—î –±—ñ–ª—å—à–∏–π –ø–æ—Ç—ñ–∫, –Ω—ñ–∂ –¢–µ—Ä–º—ñ–Ω–∞–ª 1 ({flow_term1}).")
else:
    print("**–û–±–∏–¥–≤–∞ —Ç–µ—Ä–º—ñ–Ω–∞–ª–∏** –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å **–æ–¥–Ω–∞–∫–æ–≤–∏–π –ø–æ—Ç—ñ–∫** (100 –æ–¥–∏–Ω–∏—Ü—å –∫–æ–∂–µ–Ω).")
    
### 2. –Ø–∫—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –º–∞—é—Ç—å –Ω–∞–π–º–µ–Ω—à—É –ø—Ä–æ–ø—É—Å–∫–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å —ñ —è–∫ —Ü–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫?
print("\n### 2. –Ø–∫—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –º–∞—é—Ç—å –Ω–∞–π–º–µ–Ω—à—É –ø—Ä–æ–ø—É—Å–∫–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å —ñ —è–∫ —Ü–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫?")
min_cut_capacity = sum(capacity_matrix[nodes[w]][nodes[s]] for w in warehouses for s in shops)
print(f"–ù–∞–π–º–µ–Ω—à–∞ —Å—É–º–∞—Ä–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å (–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä—ñ–∑) –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Ä–æ–∑—Ä—ñ–∑—ñ **–°–∫–ª–∞–¥–∏ ‚Üí –ú–∞–≥–∞–∑–∏–Ω–∏**, —ñ –≤–æ–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å **{min_cut_capacity} –æ–¥–∏–Ω–∏—Ü—å**.")
print(f"–¶–µ **–≤—É–∑—å–∫–µ –º—ñ—Å—Ü–µ** –ª—ñ–º—ñ—Ç—É—î –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫ –¥–æ **{max_flow}** –æ–¥–∏–Ω–∏—Ü—å, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¢–µ–æ—Ä–µ–º–∏ –ø—Ä–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑—Ä—ñ–∑-–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø–æ—Ç—ñ–∫.")
print("–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ –Ω–∞–π–º–µ–Ω—à—É –ø—Ä–æ–ø—É—Å–∫–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –º–∞—î –º–∞—Ä—à—Ä—É—Ç **–°–∫–ª–∞–¥ 4 ‚Üí –ú–∞–≥–∞–∑–∏–Ω 13** (**5 –æ–¥–∏–Ω–∏—Ü—å**).")

### 3. –Ø–∫—ñ –º–∞–≥–∞–∑–∏–Ω–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–∞–π–º–µ–Ω—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ —á–∏ –º–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏ —ó—Ö –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è?
print(f"\n### 3. –Ø–∫—ñ –º–∞–≥–∞–∑–∏–Ω–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–∞–π–º–µ–Ω—à–µ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ —á–∏ –º–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏ —ó—Ö –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è?")
max_shop_flow = max(shop_flows, key=lambda x: x['–ü–æ—Ç—ñ–∫ –¥–æ –ú–∞–≥–∞–∑–∏–Ω—É'])
min_shop_flow = min(shop_flows, key=lambda x: x['–ü–æ—Ç—ñ–∫ –¥–æ –ú–∞–≥–∞–∑–∏–Ω—É'])

print(f"–ú–∞–≥–∞–∑–∏–Ω –∑ –Ω–∞–π–º–µ–Ω—à–∏–º –ø–æ—Ç–æ–∫–æ–º: **{min_shop_flow['–ú–∞–≥–∞–∑–∏–Ω']}** –∑ –ø–æ—Ç–æ–∫–æ–º **{min_shop_flow['–ü–æ—Ç—ñ–∫ –¥–æ –ú–∞–≥–∞–∑–∏–Ω—É']}** –æ–¥–∏–Ω–∏—Ü—å.")
print(f"–ú–∞–≥–∞–∑–∏–Ω –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º –ø–æ—Ç–æ–∫–æ–º: **{max_shop_flow['–ú–∞–≥–∞–∑–∏–Ω']}** –∑ –ø–æ—Ç–æ–∫–æ–º **{max_shop_flow['–ü–æ—Ç—ñ–∫ –¥–æ –ú–∞–≥–∞–∑–∏–Ω—É']}** –æ–¥–∏–Ω–∏—Ü—å.")
print("–ú–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏ –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –¥–æ **–ú–∞–≥–∞–∑–∏–Ω—É 13**, –∑–±—ñ–ª—å—à–∏–≤—à–∏ –ø—Ä–æ–ø—É—Å–∫–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—É **–°–∫–ª–∞–¥ 4 ‚Üí –ú–∞–≥–∞–∑–∏–Ω 13** (–Ω–∞—Ä–∞–∑—ñ 5 –æ–¥.).")
print("–î–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±—ñ–ª—å—à–∏—Ç–∏ —Å—É–º–∞—Ä–Ω—É –ø—Ä–æ–ø—É—Å–∫–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –Ω–∞ —Ä–æ–∑—Ä—ñ–∑—ñ **–°–∫–ª–∞–¥–∏ ‚Üí –ú–∞–≥–∞–∑–∏–Ω–∏**.")

### 4. –ß–∏ —î –≤—É–∑—å–∫—ñ –º—ñ—Å—Ü—è, —è–∫—ñ –º–æ–∂–Ω–∞ —É—Å—É–Ω—É—Ç–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ?
print("\n### 4. –ß–∏ —î –≤—É–∑—å–∫—ñ –º—ñ—Å—Ü—è, —è–∫—ñ –º–æ–∂–Ω–∞ —É—Å—É–Ω—É—Ç–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ?")
print("–ì–æ–ª–æ–≤–Ω–µ –≤—É–∑—å–∫–µ –º—ñ—Å—Ü–µ ‚Äì —Ü–µ **—Å—É–º–∞—Ä–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å —É—Å—ñ—Ö —Ä–µ–±–µ—Ä –≤—ñ–¥ –°–∫–ª–∞–¥—ñ–≤ –¥–æ –ú–∞–≥–∞–∑–∏–Ω—ñ–≤** (200 –æ–¥–∏–Ω–∏—Ü—å).")
print("–î–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –º–æ–¥–µ—Ä–Ω—ñ–∑—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª–∏ **–°–∫–ª–∞–¥–∏ ‚Üí –ú–∞–≥–∞–∑–∏–Ω–∏**, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—Å—ñ –≤–æ–Ω–∏ **–Ω–∞—Å–∏—á–µ–Ω—ñ** (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –Ω–∞ 100% —ó—Ö —Å—É–º–∞—Ä–Ω–æ—ó –ø—Ä–æ–ø—É—Å–∫–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ).")